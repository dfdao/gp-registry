/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Registry {
  export type GrandPrixMetadataStruct = {
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    configHash: PromiseOrValue<BytesLike>;
    parentAddress: PromiseOrValue<string>;
    seasonId: PromiseOrValue<BigNumberish>;
  };

  export type GrandPrixMetadataStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber
  ] & {
    startTime: BigNumber;
    endTime: BigNumber;
    configHash: string;
    parentAddress: string;
    seasonId: BigNumber;
  };
}

export interface RegistryInterface extends utils.Interface {
  functions: {
    "addGrandPrix(uint256,uint256,bytes32,address,uint256)": FunctionFragment;
    "admins(uint256)": FunctionFragment;
    "configHashToMetadata(bytes32)": FunctionFragment;
    "contractOwner()": FunctionFragment;
    "deleteRound(bytes32)": FunctionFragment;
    "getAllAdmins()": FunctionFragment;
    "getAllGrandPrix()": FunctionFragment;
    "grandPrixList(uint256)": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "setAdmin(address,bool)": FunctionFragment;
    "setContractOwner(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addGrandPrix"
      | "admins"
      | "configHashToMetadata"
      | "contractOwner"
      | "deleteRound"
      | "getAllAdmins"
      | "getAllGrandPrix"
      | "grandPrixList"
      | "isAdmin"
      | "setAdmin"
      | "setContractOwner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addGrandPrix",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "admins",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "configHashToMetadata",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "contractOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteRound",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAdmins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllGrandPrix",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grandPrixList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractOwner",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addGrandPrix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "configHashToMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllGrandPrix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grandPrixList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractOwner",
    data: BytesLike
  ): Result;

  events: {
    "GrandPrixAdded(bytes32)": EventFragment;
    "GrandPrixDeleted(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GrandPrixAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrandPrixDeleted"): EventFragment;
}

export interface GrandPrixAddedEventObject {
  configHash: string;
}
export type GrandPrixAddedEvent = TypedEvent<
  [string],
  GrandPrixAddedEventObject
>;

export type GrandPrixAddedEventFilter = TypedEventFilter<GrandPrixAddedEvent>;

export interface GrandPrixDeletedEventObject {
  configHash: string;
}
export type GrandPrixDeletedEvent = TypedEvent<
  [string],
  GrandPrixDeletedEventObject
>;

export type GrandPrixDeletedEventFilter =
  TypedEventFilter<GrandPrixDeletedEvent>;

export interface Registry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addGrandPrix(
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      configHash: PromiseOrValue<BytesLike>,
      parentAddress: PromiseOrValue<string>,
      seasonId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admins(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    configHashToMetadata(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, BigNumber] & {
        startTime: BigNumber;
        endTime: BigNumber;
        configHash: string;
        parentAddress: string;
        seasonId: BigNumber;
      }
    >;

    contractOwner(overrides?: CallOverrides): Promise<[string]>;

    deleteRound(
      _configHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllAdmins(overrides?: CallOverrides): Promise<[string[]]>;

    getAllGrandPrix(
      overrides?: CallOverrides
    ): Promise<[Registry.GrandPrixMetadataStructOutput[]]>;

    grandPrixList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, BigNumber] & {
        startTime: BigNumber;
        endTime: BigNumber;
        configHash: string;
        parentAddress: string;
        seasonId: BigNumber;
      }
    >;

    isAdmin(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setAdmin(
      admin: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setContractOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addGrandPrix(
    startTime: PromiseOrValue<BigNumberish>,
    endTime: PromiseOrValue<BigNumberish>,
    configHash: PromiseOrValue<BytesLike>,
    parentAddress: PromiseOrValue<string>,
    seasonId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admins(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  configHashToMetadata(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, BigNumber] & {
      startTime: BigNumber;
      endTime: BigNumber;
      configHash: string;
      parentAddress: string;
      seasonId: BigNumber;
    }
  >;

  contractOwner(overrides?: CallOverrides): Promise<string>;

  deleteRound(
    _configHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllAdmins(overrides?: CallOverrides): Promise<string[]>;

  getAllGrandPrix(
    overrides?: CallOverrides
  ): Promise<Registry.GrandPrixMetadataStructOutput[]>;

  grandPrixList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, BigNumber] & {
      startTime: BigNumber;
      endTime: BigNumber;
      configHash: string;
      parentAddress: string;
      seasonId: BigNumber;
    }
  >;

  isAdmin(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setAdmin(
    admin: PromiseOrValue<string>,
    allowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setContractOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addGrandPrix(
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      configHash: PromiseOrValue<BytesLike>,
      parentAddress: PromiseOrValue<string>,
      seasonId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    admins(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    configHashToMetadata(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, BigNumber] & {
        startTime: BigNumber;
        endTime: BigNumber;
        configHash: string;
        parentAddress: string;
        seasonId: BigNumber;
      }
    >;

    contractOwner(overrides?: CallOverrides): Promise<string>;

    deleteRound(
      _configHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllAdmins(overrides?: CallOverrides): Promise<string[]>;

    getAllGrandPrix(
      overrides?: CallOverrides
    ): Promise<Registry.GrandPrixMetadataStructOutput[]>;

    grandPrixList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, BigNumber] & {
        startTime: BigNumber;
        endTime: BigNumber;
        configHash: string;
        parentAddress: string;
        seasonId: BigNumber;
      }
    >;

    isAdmin(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setAdmin(
      admin: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GrandPrixAdded(bytes32)"(
      configHash?: PromiseOrValue<BytesLike> | null
    ): GrandPrixAddedEventFilter;
    GrandPrixAdded(
      configHash?: PromiseOrValue<BytesLike> | null
    ): GrandPrixAddedEventFilter;

    "GrandPrixDeleted(bytes32)"(
      configHash?: PromiseOrValue<BytesLike> | null
    ): GrandPrixDeletedEventFilter;
    GrandPrixDeleted(
      configHash?: PromiseOrValue<BytesLike> | null
    ): GrandPrixDeletedEventFilter;
  };

  estimateGas: {
    addGrandPrix(
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      configHash: PromiseOrValue<BytesLike>,
      parentAddress: PromiseOrValue<string>,
      seasonId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admins(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configHashToMetadata(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractOwner(overrides?: CallOverrides): Promise<BigNumber>;

    deleteRound(
      _configHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllAdmins(overrides?: CallOverrides): Promise<BigNumber>;

    getAllGrandPrix(overrides?: CallOverrides): Promise<BigNumber>;

    grandPrixList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAdmin(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdmin(
      admin: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setContractOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addGrandPrix(
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      configHash: PromiseOrValue<BytesLike>,
      parentAddress: PromiseOrValue<string>,
      seasonId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admins(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    configHashToMetadata(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deleteRound(
      _configHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllAdmins(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllGrandPrix(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grandPrixList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAdmin(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdmin(
      admin: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setContractOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
